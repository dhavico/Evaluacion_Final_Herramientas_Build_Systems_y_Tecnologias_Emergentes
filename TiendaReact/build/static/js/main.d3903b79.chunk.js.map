{"version":3,"sources":["serviceWorker.js","components/Login.jsx","components/main/Main.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Login","state","correo","contrasena","blnMessage","changeState","bind","onLogin","event","target","id","this","setState","value","preventDefault","firebase","auth","signInWithEmailAndPassword","then","result","console","log","user","email","catch","err","code","message","className","onSubmit","htmlFor","onChange","type","required","aria-live","aria-atomic","style","position","minHeight","Toast","onClose","show","delay","autohide","top","right","minWidth","Header","icon","faStoreAlt","Body","Component","Main","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","history","browserHistory","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4EC0DSC,E,YArEX,aAAc,IAAD,8BACT,+CACKC,MAAQ,CACTC,OAAQ,GACRC,WAAY,GACZC,YAAY,GAEhB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBARN,E,yEAWDE,GACe,WAApBA,EAAMC,OAAOC,IACdC,KAAKC,SAAS,CAACV,OAAQM,EAAMC,OAAOI,QAEf,eAApBL,EAAMC,OAAOC,IACZC,KAAKC,SAAS,CAACT,WAAYK,EAAMC,OAAOI,U,8BAIxCL,GAAO,IAAD,OACVA,EAAMM,iBACN,IAAIZ,EAASS,KAAKV,MAAMC,OACpBC,EAAaQ,KAAKV,MAAME,WAC5BY,IAASC,OAAOC,2BAA2Bf,EAAQC,GAClDe,MAAM,SAAAC,GACHC,QAAQC,IAAR,UAAeF,EAAOG,KAAKC,MAA3B,8BAGHC,OAAM,SAAAC,GACHL,QAAQC,IAAR,gBAAqBI,EAAIC,KAAzB,aAAkCD,EAAIE,UACtC,EAAKf,SAAS,CAAER,YAAY,S,+BAI3B,IAAD,OACJ,OACI,6BACI,yBAAKwB,UAAU,mBACX,yBAAKA,UAAU,6DACX,0BAAMC,SAAUlB,KAAKJ,SACjB,wBAAIqB,UAAU,gCAAd,uBACA,yBAAKA,UAAU,cACX,2BAAOE,QAAQ,UAAf,yBACA,2BAAOjB,MAAOF,KAAKV,MAAMC,OAAQ6B,SAAUpB,KAAKN,YAAa2B,KAAK,QAAQtB,GAAG,SAASkB,UAAU,gCAAgCK,UAAQ,KAE5I,yBAAKL,UAAU,cACX,2BAAOE,QAAQ,cAAf,iBACA,2BAAOjB,MAAOF,KAAKV,MAAME,WAAY4B,SAAUpB,KAAKN,YAAa2B,KAAK,WAAWtB,GAAG,aAAakB,UAAU,gCAAgCK,UAAQ,KAEvJ,4BAAQD,KAAK,SAASJ,UAAU,8BAAhC,eAIZ,yBAAKM,YAAU,SAASC,cAAY,OAAOC,MAAO,CAAEC,SAAU,WAAYC,UAAW,UACrF,kBAACC,EAAA,EAAD,CAAOC,QAAS,kBAAM,EAAK5B,SAAS,CAAER,YAAY,KAASqC,KAAM9B,KAAKV,MAAMG,WAAYsC,MAAO,IAAMC,UAAQ,EAACP,MAAO,CAAEC,SAAU,WAAYO,IAAK,OAAQC,MAAO,OAAQC,SAAU,UAC/K,kBAACP,EAAA,EAAMQ,OAAP,KACA,kBAAC,IAAD,CAAiBC,KAAMC,MACvB,uBAAGrB,UAAU,0BACb,4BAAQA,UAAU,WAAlB,wBAEA,kBAACW,EAAA,EAAMW,KAAP,CAAYtB,UAAU,2CAAtB,mD,GA9DAuB,aCMLC,E,iLARP,OACI,qD,GAHOD,a,QCQnBpC,IAASsC,cAAc,CACnBC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,8CAGXC,IAASC,OAEL,kBAAC,IAAD,CAAQC,QAASC,KACb,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWlE,IAC3B,kBAAC,IAAD,CAAOiE,KAAK,QAAQC,UAAWd,KAGjCe,SAASC,eAAe,SHsGxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,MAAK,SAAAsD,GACjCA,EAAaC,kB","file":"static/js/main.d3903b79.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport firebase from 'firebase';\r\nimport Toast  from \"react-bootstrap/Toast\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faStoreAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Login extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            correo: '',\r\n            contrasena: '',\r\n            blnMessage: false\r\n        }\r\n        this.changeState = this.changeState.bind(this);\r\n        this.onLogin = this.onLogin.bind(this);\r\n    }\r\n\r\n    changeState(event) {\r\n        if(event.target.id === \"correo\"){\r\n          this.setState({correo: event.target.value});\r\n        }\r\n        if(event.target.id === \"contrasena\"){\r\n            this.setState({contrasena: event.target.value});\r\n        }\r\n    }\r\n\r\n    onLogin(event){\r\n        event.preventDefault();\r\n        let correo = this.state.correo,\r\n            contrasena = this.state.contrasena;\r\n        firebase.auth().signInWithEmailAndPassword(correo, contrasena)\r\n        .then( result => {\r\n            console.log(`${result.user.email} ha iniciado sesión`);\r\n\r\n        })\r\n        .catch(err => {\r\n            console.log(`Error ${err.code}: ${err.message}`);\r\n            this.setState({ blnMessage: true });\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div className=\"login-container\">\r\n                    <div className=\"col-10 col-sm-8 col-md-6 col-lg-4 col-xl-3 form-container\">\r\n                        <form onSubmit={this.onLogin}>\r\n                            <h3 className=\"text-center font-weight-bold\">Inicio de sesión</h3>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"correo\">Correo electrónico</label>\r\n                                <input value={this.state.correo} onChange={this.changeState} type=\"email\" id=\"correo\" className=\"form-control font-weight-bold\" required />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"contrasena\">Contraseña</label>\r\n                                <input value={this.state.contrasena} onChange={this.changeState} type=\"password\" id=\"contrasena\" className=\"form-control font-weight-bold\" required />\r\n                            </div>\r\n                            <button type=\"submit\" className=\"btn btn-success w-100 mt-2\">INGRESAR</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <div aria-live=\"polite\" aria-atomic=\"true\" style={{ position: 'relative', minHeight: '200px'}}>\r\n                <Toast onClose={() => this.setState({ blnMessage: false})} show={this.state.blnMessage} delay={5000} autohide style={{ position: 'absolute', top: '20px', right: '20px', minWidth: '250px' }}>\r\n                    <Toast.Header>\r\n                    <FontAwesomeIcon icon={faStoreAlt}></FontAwesomeIcon>\r\n                    <i className=\"fas fa-store-alt mr-2\"></i>\r\n                    <strong className=\"mr-auto\">Tienda Angular/Reat</strong>\r\n                    </Toast.Header>\r\n                    <Toast.Body className=\"toast-body text-danger font-weight-bold\">Usuario y/o contraseña no válidos.</Toast.Body>\r\n                </Toast>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\n\r\nclass Main extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                Hola soy el main\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport firebase from 'firebase';\nimport * as serviceWorker from './serviceWorker';\nimport Login from './components/Login';\nimport Main from './components/main/Main';\nimport { Router, Route, browserHistory } from 'react-router'\n\nfirebase.initializeApp({\n    apiKey: \"AIzaSyAWFtIhIWrRRD45jdR2Qor-6n9f_o5Dv4I\",\n    authDomain: \"apptiendaangularreact.firebaseapp.com\",\n    databaseURL: \"https://apptiendaangularreact.firebaseio.com\",\n    projectId: \"apptiendaangularreact\",\n    storageBucket: \"apptiendaangularreact.appspot.com\",\n    messagingSenderId: \"893440221010\",\n    appId: \"1:893440221010:web:efcc8a7e852525d3d6648b\"\n});\n\nReactDOM.render(\n    \n    <Router history={browserHistory}>\n        <Route path='/' component={Login}></Route>\n        <Route path='/main' component={Main}></Route>\n        {/* <Route path='/carrito' component={Carrito}></Route> */}\n    </Router>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}